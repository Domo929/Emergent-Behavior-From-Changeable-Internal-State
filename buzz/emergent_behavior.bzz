
#Sensor width in degrees. 5 deg is the default as per the original papers choice
SEN_APERTURE_DEG = 5.0

#Converts the chosen angle into radians and divides it in half. This is because we are checking +/- half the distance on either side of the robots heading
SEN_APERTURE_SPLIT_RAD = 0.5* SEN_APERTURE_DEG * math.pi / 180.0

#Sensor distance in cm. Default is 300 cm
SEN_DIST_CM = 300

#Global variable for what the current state is and most recent one
CUR_STATE = 0

#Global variable for what the robots current speed is
speed = 0.0

#Global variable for what time step its on
tick = 0

# (Type)(Reading)(State)
#   s*      0       0
genome = {
    .0  = 4.53937, #s`00
    .1  = 2.02263, #vl00
    .2  = 8.13097, #vr00
    .3  = 9.52277, #s`01
    .4  = 7.40972, #vl01
    .5  = 8.21849, #vr01
    .6  = 9.98243, #s`10
    .7  = 6.35274, #vl10
    .8  = 8.4739, #vr10
    .9  = 8.69345, #s`11
    .10 = 9.1211, #vl11
    .11 = 4.37758, #vr11
    .12 = 1.48697, #s`20
    .13 = 8.40281, #vl20
    .14 = 4.12361, #vr20
    .15 = 7.27065, #s`21
    .16 = 0.979317, #vl21
    .17 = 4.71391  #vr21
}

### BUZZ FUNCTIONS ##
function init() {
	# Initializes the state, x, y, z, reading, and speed variables
	CUR_STATE = id % 2
	cur_x = pose.position.x
	cur_y = pose.position.y
	cur_z = pose.orientation.yaw
	cur_s = CUR_STATE
	cur_r = 0
	cur_speed = 0.0

    t = {}
    neighbor.listen("store",
        function(vid, value, rid){
            t[rid] = value
        })
}


function step() {
    #printGenome()

    #Broadcasts the robots current state for the sensor
    neighbors.broadcast("state", CUR_STATE)
    # gets the current sensor reading
    reading = sensor()
    PST_STATE = CUR_STATE
    # state machine to set wheels speeds and new state depending on current state and reading
    if (CUR_STATE == 0) {
        if(reading == 0) {
            CUR_STATE = genomeToState(genome[0])
            set_wheels(genome[1], genome[2])
            speed = calcSpeed(genome[1], genome[2])
        } else if (reading == 1) {
            CUR_STATE = genomeToState(genome[6])
            set_wheels(genome[7], genome[8])
            speed = calcSpeed(genome[7], genome[8])
        } else {
            CUR_STATE = genomeToState(genome[12])
            set_wheels(genome[13], genome[14])
            speed = calcSpeed(genome[13], genome[14])
        }
    } else { #CUR_STATE == 1
        if(reading == 0) {
            CUR_STATE = genomeToState(genome[3])
            set_wheels(genome[4], genome[5])
            speed = calcSpeed(genome[4], genome[5])
        } else if (reading == 1) {
            CUR_STATE = genomeToState(genome[9])
            set_wheels(genome[10], genome[11])
            speed = calcSpeed(genome[10], genome[11])
        } else {
            CUR_STATE = genomeToState(genome[15])
            set_wheels(genome[16], genome[17])
            speed = calcSpeed(genome[16], genome[17])
        }
    }
    updateLEDS()
    # updates the internal fields for the loop functions at the end
    updateFields(reading)
    tick = tick + 1
    t = {}
}

# This just handles the 0.0 - 10.0 --> 0, 1 conversion from genome to state
function genomeToState(genome){
    if (genome >= 5.0){
        return 1
    }
    return 0
}

# Takes in the wheel speed and gives a singular value for use in analysis
function calcSpeed(vl, vr){
    return (vl + vr) / 2.0;
}

# Prints the ID and the first three values of the genome for debugging purposes
function printGenome(){
    log("ID: ", id, " ", genome[0], " ", genome[1]," ", genome[2])
}

#Calculates the reading from current inputs. More description internal
function sensor(){
    #closest_*** are initialized to a very high distance, and impossible robot id so that the checks have a valid value to compare against
    closest_dist = 2*SEN_DIST_CM
    closest_rid = -1
    # we check each neighbor
    neighbors.foreach(
        function(rid, data){
            # First we check that the neighbor is within the simulated range
            if (data.distance < SEN_DIST_CM) {
                # Then we check if the neighbor is within the width of our simulated sensor
                if ((data.azimuth > -SEN_APERTURE_SPLIT_RAD) and (data.azimuth < SEN_APERTURE_SPLIT_RAD)) {
                    # Then if we have multiple possible choices, we keep saving the closest
                    if (data.distance < closest_dist) {
                        closest_dist = data.distance
                        closest_rid = rid
                    }
                }
            }
        })
    # we check the state of the closest robot
    if(t == nil or closest_rid == -1){
        return 0
    }
    else{
        if (t[closest_rid] == CUR_STATE){
            return 1
        }
        else {
            return 2
        }
    }
}

# just updates the variables that the loop functions read with the sensor reading.
function updateFields(sensor_reading) {
    cur_x = pose.position.x
    cur_y = pose.position.y
    cur_z = pose.orientation.yaw
    cur_s = CUR_STATE
    cur_r = sensor_reading
    cur_speed = speed
}

function updateLEDS() {
    if (CUR_STATE == 0) {
        set_leds(0, 255, 0)
    } else {
        set_leds(0, 0, 255)
    }
}

function reset() {
}

function destroy() {
}
